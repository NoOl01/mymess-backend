// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/scylla.proto

package scyllapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScyllaService_UploadMessages_FullMethodName = "/scylla.ScyllaService/UploadMessages"
	ScyllaService_Ping_FullMethodName           = "/scylla.ScyllaService/Ping"
)

// ScyllaServiceClient is the client API for ScyllaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScyllaServiceClient interface {
	UploadMessages(ctx context.Context, in *UploadMessagesRequest, opts ...grpc.CallOption) (*BaseResultResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BaseResultResponse, error)
}

type scyllaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScyllaServiceClient(cc grpc.ClientConnInterface) ScyllaServiceClient {
	return &scyllaServiceClient{cc}
}

func (c *scyllaServiceClient) UploadMessages(ctx context.Context, in *UploadMessagesRequest, opts ...grpc.CallOption) (*BaseResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResultResponse)
	err := c.cc.Invoke(ctx, ScyllaService_UploadMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BaseResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResultResponse)
	err := c.cc.Invoke(ctx, ScyllaService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScyllaServiceServer is the server API for ScyllaService service.
// All implementations must embed UnimplementedScyllaServiceServer
// for forward compatibility.
type ScyllaServiceServer interface {
	UploadMessages(context.Context, *UploadMessagesRequest) (*BaseResultResponse, error)
	Ping(context.Context, *emptypb.Empty) (*BaseResultResponse, error)
	mustEmbedUnimplementedScyllaServiceServer()
}

// UnimplementedScyllaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScyllaServiceServer struct{}

func (UnimplementedScyllaServiceServer) UploadMessages(context.Context, *UploadMessagesRequest) (*BaseResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMessages not implemented")
}
func (UnimplementedScyllaServiceServer) Ping(context.Context, *emptypb.Empty) (*BaseResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedScyllaServiceServer) mustEmbedUnimplementedScyllaServiceServer() {}
func (UnimplementedScyllaServiceServer) testEmbeddedByValue()                       {}

// UnsafeScyllaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScyllaServiceServer will
// result in compilation errors.
type UnsafeScyllaServiceServer interface {
	mustEmbedUnimplementedScyllaServiceServer()
}

func RegisterScyllaServiceServer(s grpc.ServiceRegistrar, srv ScyllaServiceServer) {
	// If the following call pancis, it indicates UnimplementedScyllaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScyllaService_ServiceDesc, srv)
}

func _ScyllaService_UploadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaServiceServer).UploadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScyllaService_UploadMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaServiceServer).UploadMessages(ctx, req.(*UploadMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScyllaService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ScyllaService_ServiceDesc is the grpc.ServiceDesc for ScyllaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScyllaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scylla.ScyllaService",
	HandlerType: (*ScyllaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMessages",
			Handler:    _ScyllaService_UploadMessages_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ScyllaService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scylla.proto",
}
